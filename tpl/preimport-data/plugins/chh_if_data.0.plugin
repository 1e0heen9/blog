a:11:{s:4:"name";s:11:"chh_if_data";s:6:"status";s:1:"1";s:6:"author";s:15:"Coke Harrington";s:10:"author_uri";s:24:"http://www.cokesque.com/";s:7:"version";s:4:"0.10";s:11:"description";s:67:"Show a block of text only if enclosed Txp tags produce some output.";s:4:"help";s:819:"	<h2>chh_if_data</h2>

	<p>This tag is used to determine whether some contained Txp tags output any data, allowing the conditional output of extra markup, like a header or a "no articles found" message.</p>

<pre>
&lt;txp:chh_if_data&gt;
    &lt;h3&gt;Here's an article list&lt;/h3&gt;
    &lt;txp:article_custom category="Nogo" /&gt;
&lt;txp:else /&gt;
    &lt;p&gt;article_custom had nothing to say.&lt;/p&gt;
&lt;/txp:chh_if_data&gt;</pre>
<pre>
&lt;txp:chh_if_data&gt;
    Static text will NEVER be shown.
    Drop a Txp tag in here!<br />
&lt;/txp:chh_if_data&gt;<br />
</pre>

	<p>If the enclosed chunk of text contains several Txp tags, <code>chh_if_data</code> will evaluate to true when <em>any</em> of the tags returns data.</p>

	<p>"Data," in this case, mean any output at all, including whitespace.</p>


 ";s:4:"code";s:857:"
function chh_if_data ($atts, $thing='') {
    $atts = lAtts(array('debug' => 0), $atts);

    $f = '/<txp:(\S+)\b(.*)(?:(?<!br )(\/))?'.chr(62).'(?(3)|(.+)<\/txp:\1>)/sU';
    $iftext = EvalElse($thing, true);
    $thresh = 1 + strlen(preg_replace($f, '', $iftext));

    $parsed = parse($iftext);
    $parsed_len = strlen($parsed);

    $empty = 'Data';
    if (strlen($parsed) < $thresh) { #or !preg_match('/\S/', $parsed)) {
        $parsed = parse(EvalElse($thing, false));
        $empty = 'No Data';
    }
    return $atts['debug']
           ? "<!-- $empty -- Threshhold: $thresh Length: $parsed_len -->" . $parsed
           : $parsed;
}

// Deprecated due to poor naming
function chh_unless_empty ($atts, $thing='') {
    return chh_if_data($atts, $thing);
}
function chh_if_not_empty ($atts, $thing='') {
    return chh_if_data($atts, $thing);
}
";s:12:"code_restore";s:857:"
function chh_if_data ($atts, $thing='') {
    $atts = lAtts(array('debug' => 0), $atts);

    $f = '/<txp:(\S+)\b(.*)(?:(?<!br )(\/))?'.chr(62).'(?(3)|(.+)<\/txp:\1>)/sU';
    $iftext = EvalElse($thing, true);
    $thresh = 1 + strlen(preg_replace($f, '', $iftext));

    $parsed = parse($iftext);
    $parsed_len = strlen($parsed);

    $empty = 'Data';
    if (strlen($parsed) < $thresh) { #or !preg_match('/\S/', $parsed)) {
        $parsed = parse(EvalElse($thing, false));
        $empty = 'No Data';
    }
    return $atts['debug']
           ? "<!-- $empty -- Threshhold: $thresh Length: $parsed_len -->" . $parsed
           : $parsed;
}

// Deprecated due to poor naming
function chh_unless_empty ($atts, $thing='') {
    return chh_if_data($atts, $thing);
}
function chh_if_not_empty ($atts, $thing='') {
    return chh_if_data($atts, $thing);
}
";s:8:"code_md5";s:32:"967a43e8eecce18e74b790ee6204c956";s:4:"type";s:1:"0";}