a:11:{s:4:"name";s:15:"glx_admin_image";s:6:"status";s:1:"1";s:6:"author";s:17:"Patrick Kollitsch";s:10:"author_uri";s:24:"http://grauhirn.org/txp/";s:7:"version";s:6:"2007.1";s:11:"description";s:17:"Short description";s:4:"help";s:297:"
	<h1>GLX_ADMIN_IMAGE</h1>

	<ul>
		<li><a href="http://code.google.com/p/textpattern-plugins/wiki/GlxAdminImage">Documentation at Google Code</a></li>
	</ul>
	<ul>
		<li><a href="http://textpattern-plugins.googlecode.com/svn/trunk/current/glx_admin_image.txt">Current Version</a></li>
	</ul>



 ";s:4:"code";s:23589:"if (@ txpinterface == 'admin') {

	add_privs('image', '1');
    register_callback('glx_image_opts',         'image');
    register_callback('glx_admin_image',        'image');
    register_callback('glx_image_edit_opts',    'image', 'thumbnail_insert');
    register_callback('glx_image_edit_opts',    'image', 'image_replace');
    register_callback('glx_image_edit_opts',    'image', 'image_edit');
};
// configuration
// change the variables as you like but remember to note your changes
// because updates on the plugin will destroy your settings
//
// enable which extensions are supported
define('JPG', true);
define('GIF', true);
//define('PNG', true); // somehow my installation throws errors even with gd-png installed and enabled
// set this to the default-thumbsize
define('THUMBSIZE', 100);
// set this to the default-picturesize
define('PICSIZE', 500);
// set this to the default-thumbquality
define('THUMBQUALITY', 90);
// set this to the default-picturequality
define('PICQUALITY', 80);
// set this to 0 to show the original thumbnail- and cutting-forms of txp.
define('HIDETXP', 1);
// set this to 1 to force old method of squarethumbproduction (deprecated)
define('METHOD', 2);
// set this to false if you want to prohibit the enlargement of images by resizing
define('ENABLE_ENLARGING', true);
// for debugging, no redirections, no actions, only information
define('GDEBUG', false);
define('GDEBUG2', true); // if GDEBUG is true check gd?
//$_POST['resize'] submit resize
//$_POST['rotate'] submit rotate
//$_POST['both']   submit both
//object = (original|both|thumbnail) // radio what image should be changed
//square = 1                         //checkbox if thumb should be squared
//largeSize = int
//thumbSize = int
//thumbValue = height|width|longest
//rotateValue = degree
function glx_admin_image(){
    $id = gps('id');
    $doresize = gps('doResizeLarge');
    $action = gps('action');
    if (!empty($action) && $action == 'glx'){
        glx_checkGd(); // fining out if gd is usable
        if (!empty($_POST['resize']) || !empty($_POST['both'])){
            glx_image_resize();
        };
        if (!empty($_POST['rotate']) || !empty($_POST['both'])){
            glx_image_rotate();
        };
		header("Location: index.php?event=image&step=image_edit&id=".$id);
		exit;
    } elseif (!empty($doresize)){
        glx_image_resize();
		header("Location: index.php?event=image&step=image_edit&id=".$id);
		exit;
    };
}
function glx_image_resize() {
//object = (original|both|thumbnail) // radio what image should be changed
//square = 1                         //checkbox if thumb should be squared

//thumbValue = height|width|longest
    $object = gps('object');
    $do_resize_large = ($object == 'original'  || $object == 'both') ? 1             : 0;
    $do_resize_thumb = ($object == 'thumbnail' || $object == 'both') ? 1             : 0;
	$square_image    = gps('square')                                 ? gps('square') : 0;
	$largeValue = cs('largeSize')  ? cs('largeSize')  : PICSIZE;
	$thumbValue = cs('thumbSize')  ? cs('thumbSize')  : THUMBSIZE;
	$largeValue = gps('largeSize') ? gps('largeSize') : $largeValue;
	$thumbValue = gps('thumbSize') ? gps('thumbSize') : $thumbValue;
    $side_thumb = gps('side') ? gps('side') : 'longest';
	$image_id   = gps('id')   ? gps('id')   : mysql_insert_id();
	$quality_thumb = ziqIsPercent(gps('thumbQua')) ? intval(gps('thumbQua')) : THUMBQUALITY;
	$quality_large = ziqIsPercent(gps('largeQua')) ? intval(gps('largeQua')) : PICQUALITY;
	setcookie('largeSize', $largeValue, time() + 60 * 60 * 24 * 365);
    setcookie('thumbSize', $thumbValue, time() + 60 * 60 * 24 * 365);
    list ($suffix, $source) = glx_get_source($image_id);
	if (file_exists($source) && ($do_resize_thumb == 1 || $do_resize_large == 1)){
		$gd   = glx_get_gd_version();
		$size = getimagesize($source);
		$x = $size[0];
		$y = $size[1];
        if ($side_thumb == 'longest'){
            $max = ($x > $y) ? $x : $y;
            $min = ($x > $y) ? $y : $x;
        } elseif ($side_thumb == 'height'){
            $max = $y;
            $min = $x;
        } else {
            $max = $x;
            $min = $y;
        };
		if ($do_resize_thumb == 1){
			$rate_thumb    = $max / $thumbValue;
			$final_x_thumb = $x / $rate_thumb;
			$final_y_thumb = $y / $rate_thumb;
			if ($square_image == 1) {
				$resize_thumb = $gd['create']($thumbValue, $thumbValue);
				$im_thumb = $gd['imagecreatefrom'][$suffix]($source);
                if (METHOD == 2){
                    if ($x > $y) {
                        $x0 = ($x - $y) / 2;
                        $x1 = $y;
                        $y0 = 0;
                        $y1 = $y;
                    } else {
                        $x0 = 0;
                        $x1 = $x;
                        $y0 = ($y - $x) / 2;
                        $y1 = $x;
                    };
                    $gd['copy']($resize_thumb, $im_thumb, 0, 0,$x0,$y0, $thumbValue, $thumbValue, $x1, $y1);
                } else {
                    $gd['copy']($resize_thumb, $im_thumb, 0, 0, 0, 0, $thumbValue, $thumbValue, $thumbValue * 1.5, $thumbValue * 1.5);
                };
				$source_thumb = IMPATH.$image_id.'t.'.$suffix;
				$gd['image'][$suffix]($resize_thumb, $source_thumb, $quality_thumb);
				imagedestroy($resize_thumb);
			} else {
				$resize_thumb = $gd['create']($final_x_thumb, $final_y_thumb);
				$im_thumb = $gd['imagecreatefrom'][$suffix]($source);
				$gd['copy']($resize_thumb, $im_thumb, 0, 0, 0, 0, $final_x_thumb, $final_y_thumb, $x, $y);
				$source_thumb = IMPATH.$image_id.'t.'.$suffix;
				$gd['image'][$suffix]($resize_thumb, $source_thumb, $quality_thumb);
				imagedestroy($resize_thumb);
			}
			$thumb = true;
			safe_update('txp_image', "thumbnail='$thumb'", "id='$image_id'");
		}
		if ($do_resize_large == 1){
			$rate_large = $max / $largeValue;
			$final_x_large = $x / $rate_large;
			$final_y_large = $y / $rate_large;
			if ((ENABLE_ENLARGING == false && $x > $final_x_large) || ENABLE_ENLARGING == true) {
				$resize_large = $gd['create']($final_x_large, $final_y_large);
				$im_large = $gd['imagecreatefrom'][$suffix]($source);
				$gd['copy']($resize_large, $im_large, 0, 0, 0, 0, $final_x_large, $final_y_large, $x, $y);
				$gd['image'][$suffix]($resize_large, $source, $quality_large);
				imagedestroy($resize_large);
			};
			$size = getimagesize($source);
			safe_update('txp_image', "w='".$size[0]."',h='".$size[1]."'", "id='$image_id'");
		};
	};
}
function glx_image_rotate(){
    $gd  = glx_get_gd_version();
	$deg = gps('rotateValue');
	$id  = gps('id');
	if (empty($deg) || empty($id)){
	    return false;
	};
	if ($_POST['object'] == 'both' || $_POST['object'] == 'original'){
        list($suffix, $source) = glx_get_source($id);
    	$im = $gd['imagecreatefrom'][$suffix]($source);
    	$im = (function_exists('imagerotate')) ? imagerotate($im, $deg, 0) : glx_old_image_rotate($im, $deg);
    	$gd['image'][$suffix]($im, $source, 95);
    	imagedestroy($im);
    	$size = getimagesize($source);
    	safe_update('txp_image', "w='".$size[0]."',h='".$size[1]."'", "id='$id'");
	};
	if ($_POST['object'] == 'both' || $_POST['object'] == 'thumbnail'){
        list($suffix, $source) = glx_get_source($id, true);
    	$im = $gd['imagecreatefrom'][$suffix]($source);
    	$im = (function_exists('imagerotate')) ? imagerotate($im, $deg, 0) : glx_old_image_rotate($im, $deg);
    	$gd['image'][$suffix]($im, $source, 95);
    	imagedestroy($im);
	};
}
function glx_checkGd(){
    if (defined('GDEBUG2') && GDEBUG2 == true){
        if (!extension_loaded('gd')){
            echo "<p>Extension GD is not loaded by default";
            if (!dl('gd.so') && !dl('gd.dll')){
                " and cannot be loaded dynamic";
            } else {
                " but it can be loaded dynamic";
            };
            echo ".</p>";
        } else {
            echo "<p>Extension GD is loaded by default.";
        };
    };
}
function glxStylesheet(){
    $rs = safe_row("name", "txp_css", "name='glx_admin_image' limit 1");
    if (!$rs){
        $css = "bGFiZWwuaW5saW5lIHttYXJnaW46IDVweDt9CQ0KbGFiZWwuYmxvY2sge21hcmdpbjogNXB4IDVweCAwIDA7ZGlzcGxheTogYmxvY2s7fQ0KLnJlc2l6ZSB7ZmxvYXQ6IGxlZnQ7fQ0KLnJvdGF0ZSB7ZmxvYXQ6IHJpZ2h0O30NCmhyIHtib3JkZXItYm90dG9tOiAxcHggc29saWQgI0RERERERDtib3JkZXItdG9wOiBub25lO2JvcmRlci1yaWdodDogbm9uZTtib3JkZXItbGVmdDogbm9uZTtoZWlnaHQ6IDFweDtjbGVhcjogYm90aDt9DQojZ2x4ICNmczMsICNnbHggI2ZzNCB7aGVpZ2h0OmF1dG87fQ==";
        safe_insert("txp_css", "name='glx_admin_image', css='$css'");
    };
};
/**
 * function from mdp automatic resize and thumbnail for textpattern
 * by caged: <http://www.purephotoshop.com>
 */
function glx_get_gd_version() {
    if(!function_exists('imagecreatetruecolor')){
        $function_create = 'imagecreate';
        $function_copy = 'imagecopyresized';
    } else {
        $function_create = 'imagecreatetruecolor';
        $function_copy = 'imagecopyresampled';
    };
    /**
     * @see http://forum.textpattern.com/viewtopic.php?pid=59520#p59520
     */
	return array(
        'copy' => $function_copy,
        'create' => $function_create,
        'image' => array(
            'jpg' => 'imagejpeg',
            'png' => 'imagepng',
            'gif' => 'imagegif'
        ),
        'imagecreatefrom' => array(
            'jpg' => 'imagecreatefromjpeg',
            'png' => 'imagecreatefrompng',
            'gif' => 'imagecreatefromgif'
        )
    );
}
/** Rotate image php 4.3.0 or lower by Tobias Einarsson */
function glx_old_image_rotate($src, $angle){
    // check current GD version
    $gd = glx_get_gd_version();
    $width = imagesx($src);
    $height = imagesy($src);
    $dst = ($angle == 90 || $angle == 270) ? $gd['create']($height, $width) : $gd['create']($width, $height);
    for($y=0; $y<$height; $y++){
        for($x=0; $x<$width; $x++){
            switch ($angle){
                case 90:
                    imagecopy($dst, $src, $height-$y-1, $x, $x, $y, 1, 1);
                    break;
                case 180:
                    imagecopy($dst, $src, $x, $y, $width-$x-1, $height-$y-1, 1, 1);
                    break;
                case 270:
                    imagecopy($dst, $src, $y, $width-$x-1, $x, $y, 1, 1);
                    break;
                default:
                    imagecopy($dst, $src, $x, $y, $x, $y, 1, 1);
            };
        };
    };
    imagedestroy($src);
    return($dst);
}
/** Check if value is precent by ZiQ */
function ziqIsPercent($x) {
    if (is_numeric($x)){
        $tmp = intval($x);
        if ($tmp >= 10 && $tmp <= 100){
            return true;
        };
    };
    return false;
}
function glx_image_opts($event, $step) {
    echo<<<EOF
<script type="text/javascript">
<!--
window.onload = function() {
	var inputDoResizeLarge = document.createElement('input');
	inputDoResizeLarge.setAttribute('name', 'doResizeLarge');
	inputDoResizeLarge.setAttribute('id',   'doResizeLarge');
	inputDoResizeLarge.setAttribute('type', 'checkbox');
	inputDoResizeLarge.setAttribute('value', '1');
	inputDoResizeLarge.checked = false;
	var largeValue = getCookie('glx_image_large') ? ', stored value '+getCookie('glx_image_large')+'px' : ', stored value 500px';
	var labelDoResizeLarge = createLabel('doResizeLarge', 'Resize large image'+largeValue, 'inline');
	var pDoResizeLarge = document.createElement('p');
	pDoResizeLarge.appendChild(inputDoResizeLarge);
	pDoResizeLarge.appendChild(labelDoResizeLarge);
	var formUpload = document.getElementsByTagName('form').item(2);
	formUpload.appendChild(pDoResizeLarge);
}
function createLabel(forElement, text, elementClass) {
	var labelElement = document.createElement('label');
	labelElement.setAttribute('for', forElement);
	labelElement.className = elementClass;
	var labelTextNode = document.createTextNode(text);
	labelElement.appendChild(labelTextNode);
	return labelElement;
}
function getCookie(name) {
	var dc = document.cookie;
	var prefix = name + "=";
	var begin = dc.indexOf("; " + prefix);
	if (begin == -1) {
		begin = dc.indexOf(prefix);
		if (begin != 0) return null;
	} else {
    	begin += 2;
    }
  	var end = document.cookie.indexOf(";", begin);
	if (end == -1) {
		end = dc.length;
	}
  	return unescape(dc.substring(begin + prefix.length, end));
}
-->
</script>
EOF;
}
function glx_image_edit_opts($event, $step) {
	$id = gps('id');
	global $img_dir;
	$rs = safe_row("*", "txp_image", "id='$id'");
	if ($rs){
		extract($rs);
	} else {
	    return;
	};
    glxStylesheet();
    echo<<<EOF
<script language="JavaScript" type="text/javascript">
<!--
window.onload = function() {
EOF;
    if (HIDETXP == 1){
        echo "
      document.getElementsByTagName('tr')[6].style.display = 'none';
      document.getElementsByTagName('tr')[7].style.display = 'none';";
    };
    echo "
        loadCSS('css.php?n=glx_admin_image');
    // formcontainer
        var formGLX = document.createElement('form');
        formGLX.setAttribute('action', '');
        formGLX.setAttribute('id',     'glx');
        formGLX.setAttribute('method', 'post');
    //////////////////////////////////////////
    // fieldset: where to apply the changes //
    //////////////////////////////////////////
        var fs1 = document.createElement('fieldset');
        var l1  = document.createElement('legend');
        l1.innerHTML = 'Apply to';
        fs1.appendChild(l1);
	    fs1.setAttribute('id', 'fs1');
    // radio resize original
        var e11 = document.createElement('p');
        e11.appendChild(createRadio('object', 'r11', 'original', true));
        e11.appendChild(createLabel('r11', 'Original', 'inline'));
        fs1.appendChild(e11);
    // radio resize both
        var e12 = document.createElement('p');
        e12.appendChild(createRadio('object', 'r12', 'both', false));
        e12.appendChild(createLabel('r12', 'Both', 'inline'));
        fs1.appendChild(e12);
    // radio resize thumbnail
        var e13 = document.createElement('p');
        e13.appendChild(createRadio('object', 'r13', 'thumbnail', false));
        e13.appendChild(createLabel('r13', 'Thumbnail', 'inline'));
        fs1.appendChild(e13);
    // checkbox square thumbnail
        var e14 = document.createElement('p');
        e14.appendChild(createCheckbox('square', 's', '1', false));
        e14.appendChild(createLabel('s', 'Square thumbnail', 'inline'));
        fs1.appendChild(e14);
    // add fieldset to form
        formGLX.appendChild(fs1);
    ////////////////////////
    // fieldset: settings //
    ////////////////////////
        var fs2 = document.createElement('fieldset');
        var l2  = document.createElement('legend');
        l2.innerHTML = 'Settings';
        fs2.appendChild(l2);
	    fs2.setAttribute('id', 'fs2');
    // fs2 is parted in two divs for layout
        div1 = document.createElement('div');
        div2 = document.createElement('div');
    // input largeSize
        var e21 = document.createElement('p');
        var largeValue = (getCookie('glx_image_large')) ? getCookie('glx_image_large') : 500;
        e21.appendChild(createLabel('largeSize', 'Largesize (px)', 'block'));
        e21.appendChild(createInput('largeSize', 'largeSize', largeValue, false));
        div1.appendChild(e21);
    // input thumbSize
        var e22 = document.createElement('p');
        var thumbValue = (getCookie('glx_image_thumb')) ? getCookie('glx_image_thumb') : 100;
        e22.appendChild(createLabel('thumbSize', 'Thumbsize (px)', 'block'));
        e22.appendChild(createInput('thumbSize', 'thumbSize', thumbValue));
        div1.appendChild(e22);
    // radio button thumbsize-sideheight
        var e23 = document.createElement('p');
        e23.appendChild(createRadio('side', 'r21', 'height', false));
        e23.appendChild(createLabel('r21', 'height', 'inline'));
        div2.appendChild(e23);
    // radio button thumbsize-sidewidth
        var e24 = document.createElement('p');
        e24.appendChild(createRadio('side', 'r22', 'width', false));
        e24.appendChild(createLabel('r22', 'width', 'inline'));
        div2.appendChild(e24);
    // radio button thumbsize-sidelongest
        var e25 = document.createElement('p');
        e25.appendChild(createRadio('side', 'r23', 'longest', true));
        e25.appendChild(createLabel('r23', 'longest side', 'inline'));
        div2.appendChild(e25);
    // add fieldset to form
        fs2.appendChild(div1);
        fs2.appendChild(div2);
        formGLX.appendChild(fs2);
    //////////////////////
    // fieldset: rotate //
    //////////////////////
        var fs3 = document.createElement('fieldset');
        var l3  = document.createElement('legend');
        l3.innerHTML = 'Rotation';
        fs3.appendChild(l3);
	    fs3.setAttribute('id', 'fs3');
    // radio button rotate 90 CW
        var e32 = document.createElement('p');
        e32.appendChild(createRadio('rotateValue', 'r32', '270', true));
        e32.appendChild(createLabel('r32', '90° CW', 'inline'));
        fs3.appendChild(e32);
    // radio button rotate 180
        var e31 = document.createElement('p');
        e31.appendChild(createRadio('rotateValue', 'r31', '180', false));
        e31.appendChild(createLabel('r31', '180°', 'inline'));
        fs3.appendChild(e31);
    // radio button rotate 90 CCW
        var e33 = document.createElement('p');
        e33.appendChild(createRadio('rotateVal', 'r33', '90', false));
        e33.appendChild(createLabel('r33', '90° CCW', 'inline'));
        fs3.appendChild(e33);
    // add fieldset to form
        formGLX.appendChild(fs3);
    ////////////////////////////////////////////////////
    // final fieldset, thumbnail, hiddens and submits //
    ////////////////////////////////////////////////////
        var fs4 = document.createElement('fieldset');
        var l4  = document.createElement('legend');
        l4.innerHTML = 'Execute';
        fs4.appendChild(l4);
	    fs4.setAttribute('id', 'fs4');
    // hidden fields
        fs4.appendChild(createHidden('action', 'glx'));
        fs4.appendChild(createHidden('step', 'image_edit'));
        fs4.appendChild(createHidden('id', document.getElementsByName('id').item(0).value));
        fs4.appendChild(createHidden('event', 'image'));
        fs4.appendChild(createHidden('MAX_FILE_SIZE', document.getElementsByName('MAX_FILE_SIZE').item(0).value));
    //add submit
        fs4.appendChild(createSubmit('resize', 'Resize'));
        fs4.appendChild(createSubmit('rotate', 'Rotate'));
        fs4.appendChild(createSubmit('both',   'First resize and then rotate'));
    // output of the thumbnail
        var div3 = document.createElement('div');
        var e41 = document.createElement('img');
        e41.setAttribute('class', 'thumbnail');
        e41.setAttribute('src', '".hu.$img_dir."/".$id."t".$ext."');
        e41.setAttribute('alt', 'thumbnail of the picture');
        div3.appendChild(e41);
        fs4.appendChild(div3);
    // add fieldset to form
        formGLX.appendChild(fs4);
    // insert the form before the editform
        var divGLX = document.createElement('div');
        divGLX.className = 'glx';
        divGLX.appendChild(formGLX);
        var hrClear = document.createElement('hr');
        hrClear.className = 'clear';
        var oldForm = document.getElementsByTagName('form').item(1);
        oldForm.parentNode.insertBefore(divGLX, oldForm);
        oldForm.parentNode.insertBefore(hrClear, oldForm);
// TODO: IMAGEQUALITY
// input quality
//var inputQuaThumb = createInput('thumbQua', 'thumbQua', '90');
//var labelQuaThumb = createLabel('thumbQua', 'Quality Thumb (10-100)', 'block');
//var pQuaThumb = document.createElement('p');
//pQuaThumb.appendChild(labelQuaThumb);
//pQuaThumb.appendChild(inputQuaThumb);
// input quality
//var inputQuaLarge = createInput('largeQua', 'largeQua', '80');
//var labelQuaLarge = createLabel('largeQua', 'Quality Large Image (10-100)', 'block');
//var pQuaLarge = document.createElement('p');
//pQuaLarge.appendChild(labelQuaLarge);
//pQuaLarge.appendChild(inputQuaLarge);
}
function createHidden(name, value){
    var element = document.createElement('input');
    element.setAttribute('name', name);
    element.setAttribute('type', 'hidden');
    element.setAttribute('value', value);
    return element;
}
function createSubmit(name, value){
    var element = document.createElement('input');
    element.setAttribute('class', 'smallerbox');
    element.setAttribute('type', 'submit');
    element.setAttribute('value', value);
    element.setAttribute('name', name);
    return element;
}
function createRadio(name, id, value, checked){
	var element = document.createElement('input');
	element.setAttribute('name',  name);
	element.setAttribute('id',    id);
    element.setAttribute('type',  'radio');
	element.setAttribute('value', value);
    element.checked = (checked == true) ? true : false;
	element.className = 'edit';
	return element;
}
function createCheckbox(name, id, value, checked){
	var element = document.createElement('input');
	element.setAttribute('name',  name);
	element.setAttribute('id',    id);
    element.setAttribute('type',  'checkbox');
	element.setAttribute('value', value);
    element.checked = (checked == true) ? true : false;
	element.className = 'edit';
	return element;
}
function createInput(name, id, value){
	var element = document.createElement('input');
	element.setAttribute('name', name);
	element.setAttribute('id', id);
	element.setAttribute('type', 'text');
	element.setAttribute('value', value);
	element.className = 'edit';
	return element;
}
function createLabel(forElement, text, elementClass){
	var labelElement = document.createElement('label');
	labelElement.setAttribute('for', forElement);
	labelElement.className = elementClass;
	var labelTextNode = document.createTextNode(text);
	labelElement.appendChild(labelTextNode);
	return labelElement;
}
function loadCSS(fileName){
	var s = document.createElement('link');
	s.setAttribute('href', fileName);
	s.setAttribute('rel', 'stylesheet');
	s.setAttribute('type', 'text/css');
	document.getElementsByTagName('head').item(0).appendChild(s);
}
/**
 * http://www.webreference.com/js/column8/index.html
 */
function getCookie(name){
	var dc = document.cookie;
	var prefix = name + '=';
	var begin = dc.indexOf('; ' + prefix);
	if (begin == -1){begin = dc.indexOf(prefix);if (begin != 0) return null;}
    else begin += 2;
  	var end = document.cookie.indexOf(';', begin);
	if (end == -1) end = dc.length;
  	return unescape(dc.substring(begin + prefix.length, end));
}
-->
</script>
";
}
/**
 * Guess at file type by testing for existing files
 * By dln: <http://www.unempty.com/>
 * @see http://forum.textpattern.com/viewtopic.php?pid=59520#p59520
 */
function glx_get_source($image_id, $thumbnail = false) {
    $suffixes[] = (defined('JPG')) ? 'jpg'  : '';
    $suffixes[] = (defined('JPG')) ? 'JPG'  : '';
    $suffixes[] = (defined('JPG')) ? 'jpeg' : '';
    $suffixes[] = (defined('JPG')) ? 'JPEG' : '';
    $suffixes[] = (defined('PNG')) ? 'png'  : '';
    $suffixes[] = (defined('PNG')) ? 'PNG'  : '';
    $suffixes[] = (defined('GIF')) ? 'gif'  : '';
    $suffixes[] = (defined('GIF')) ? 'GIF'  : '';
    $suffixes = array_values(array_diff($suffixes, array('')));
    foreach ($suffixes as $suffix) {
        $source = ($thumbnail === false)
            ? IMPATH.$image_id.'.'.$suffix
            : IMPATH.$image_id.'t.'.$suffix;
        if (file_exists($source)) {
            return array($suffix, $source);
        };
    };
    return array(NULL, NULL);
}
";s:12:"code_restore";s:23589:"if (@ txpinterface == 'admin') {

	add_privs('image', '1');
    register_callback('glx_image_opts',         'image');
    register_callback('glx_admin_image',        'image');
    register_callback('glx_image_edit_opts',    'image', 'thumbnail_insert');
    register_callback('glx_image_edit_opts',    'image', 'image_replace');
    register_callback('glx_image_edit_opts',    'image', 'image_edit');
};
// configuration
// change the variables as you like but remember to note your changes
// because updates on the plugin will destroy your settings
//
// enable which extensions are supported
define('JPG', true);
define('GIF', true);
//define('PNG', true); // somehow my installation throws errors even with gd-png installed and enabled
// set this to the default-thumbsize
define('THUMBSIZE', 100);
// set this to the default-picturesize
define('PICSIZE', 500);
// set this to the default-thumbquality
define('THUMBQUALITY', 90);
// set this to the default-picturequality
define('PICQUALITY', 80);
// set this to 0 to show the original thumbnail- and cutting-forms of txp.
define('HIDETXP', 1);
// set this to 1 to force old method of squarethumbproduction (deprecated)
define('METHOD', 2);
// set this to false if you want to prohibit the enlargement of images by resizing
define('ENABLE_ENLARGING', true);
// for debugging, no redirections, no actions, only information
define('GDEBUG', false);
define('GDEBUG2', true); // if GDEBUG is true check gd?
//$_POST['resize'] submit resize
//$_POST['rotate'] submit rotate
//$_POST['both']   submit both
//object = (original|both|thumbnail) // radio what image should be changed
//square = 1                         //checkbox if thumb should be squared
//largeSize = int
//thumbSize = int
//thumbValue = height|width|longest
//rotateValue = degree
function glx_admin_image(){
    $id = gps('id');
    $doresize = gps('doResizeLarge');
    $action = gps('action');
    if (!empty($action) && $action == 'glx'){
        glx_checkGd(); // fining out if gd is usable
        if (!empty($_POST['resize']) || !empty($_POST['both'])){
            glx_image_resize();
        };
        if (!empty($_POST['rotate']) || !empty($_POST['both'])){
            glx_image_rotate();
        };
		header("Location: index.php?event=image&step=image_edit&id=".$id);
		exit;
    } elseif (!empty($doresize)){
        glx_image_resize();
		header("Location: index.php?event=image&step=image_edit&id=".$id);
		exit;
    };
}
function glx_image_resize() {
//object = (original|both|thumbnail) // radio what image should be changed
//square = 1                         //checkbox if thumb should be squared

//thumbValue = height|width|longest
    $object = gps('object');
    $do_resize_large = ($object == 'original'  || $object == 'both') ? 1             : 0;
    $do_resize_thumb = ($object == 'thumbnail' || $object == 'both') ? 1             : 0;
	$square_image    = gps('square')                                 ? gps('square') : 0;
	$largeValue = cs('largeSize')  ? cs('largeSize')  : PICSIZE;
	$thumbValue = cs('thumbSize')  ? cs('thumbSize')  : THUMBSIZE;
	$largeValue = gps('largeSize') ? gps('largeSize') : $largeValue;
	$thumbValue = gps('thumbSize') ? gps('thumbSize') : $thumbValue;
    $side_thumb = gps('side') ? gps('side') : 'longest';
	$image_id   = gps('id')   ? gps('id')   : mysql_insert_id();
	$quality_thumb = ziqIsPercent(gps('thumbQua')) ? intval(gps('thumbQua')) : THUMBQUALITY;
	$quality_large = ziqIsPercent(gps('largeQua')) ? intval(gps('largeQua')) : PICQUALITY;
	setcookie('largeSize', $largeValue, time() + 60 * 60 * 24 * 365);
    setcookie('thumbSize', $thumbValue, time() + 60 * 60 * 24 * 365);
    list ($suffix, $source) = glx_get_source($image_id);
	if (file_exists($source) && ($do_resize_thumb == 1 || $do_resize_large == 1)){
		$gd   = glx_get_gd_version();
		$size = getimagesize($source);
		$x = $size[0];
		$y = $size[1];
        if ($side_thumb == 'longest'){
            $max = ($x > $y) ? $x : $y;
            $min = ($x > $y) ? $y : $x;
        } elseif ($side_thumb == 'height'){
            $max = $y;
            $min = $x;
        } else {
            $max = $x;
            $min = $y;
        };
		if ($do_resize_thumb == 1){
			$rate_thumb    = $max / $thumbValue;
			$final_x_thumb = $x / $rate_thumb;
			$final_y_thumb = $y / $rate_thumb;
			if ($square_image == 1) {
				$resize_thumb = $gd['create']($thumbValue, $thumbValue);
				$im_thumb = $gd['imagecreatefrom'][$suffix]($source);
                if (METHOD == 2){
                    if ($x > $y) {
                        $x0 = ($x - $y) / 2;
                        $x1 = $y;
                        $y0 = 0;
                        $y1 = $y;
                    } else {
                        $x0 = 0;
                        $x1 = $x;
                        $y0 = ($y - $x) / 2;
                        $y1 = $x;
                    };
                    $gd['copy']($resize_thumb, $im_thumb, 0, 0,$x0,$y0, $thumbValue, $thumbValue, $x1, $y1);
                } else {
                    $gd['copy']($resize_thumb, $im_thumb, 0, 0, 0, 0, $thumbValue, $thumbValue, $thumbValue * 1.5, $thumbValue * 1.5);
                };
				$source_thumb = IMPATH.$image_id.'t.'.$suffix;
				$gd['image'][$suffix]($resize_thumb, $source_thumb, $quality_thumb);
				imagedestroy($resize_thumb);
			} else {
				$resize_thumb = $gd['create']($final_x_thumb, $final_y_thumb);
				$im_thumb = $gd['imagecreatefrom'][$suffix]($source);
				$gd['copy']($resize_thumb, $im_thumb, 0, 0, 0, 0, $final_x_thumb, $final_y_thumb, $x, $y);
				$source_thumb = IMPATH.$image_id.'t.'.$suffix;
				$gd['image'][$suffix]($resize_thumb, $source_thumb, $quality_thumb);
				imagedestroy($resize_thumb);
			}
			$thumb = true;
			safe_update('txp_image', "thumbnail='$thumb'", "id='$image_id'");
		}
		if ($do_resize_large == 1){
			$rate_large = $max / $largeValue;
			$final_x_large = $x / $rate_large;
			$final_y_large = $y / $rate_large;
			if ((ENABLE_ENLARGING == false && $x > $final_x_large) || ENABLE_ENLARGING == true) {
				$resize_large = $gd['create']($final_x_large, $final_y_large);
				$im_large = $gd['imagecreatefrom'][$suffix]($source);
				$gd['copy']($resize_large, $im_large, 0, 0, 0, 0, $final_x_large, $final_y_large, $x, $y);
				$gd['image'][$suffix]($resize_large, $source, $quality_large);
				imagedestroy($resize_large);
			};
			$size = getimagesize($source);
			safe_update('txp_image', "w='".$size[0]."',h='".$size[1]."'", "id='$image_id'");
		};
	};
}
function glx_image_rotate(){
    $gd  = glx_get_gd_version();
	$deg = gps('rotateValue');
	$id  = gps('id');
	if (empty($deg) || empty($id)){
	    return false;
	};
	if ($_POST['object'] == 'both' || $_POST['object'] == 'original'){
        list($suffix, $source) = glx_get_source($id);
    	$im = $gd['imagecreatefrom'][$suffix]($source);
    	$im = (function_exists('imagerotate')) ? imagerotate($im, $deg, 0) : glx_old_image_rotate($im, $deg);
    	$gd['image'][$suffix]($im, $source, 95);
    	imagedestroy($im);
    	$size = getimagesize($source);
    	safe_update('txp_image', "w='".$size[0]."',h='".$size[1]."'", "id='$id'");
	};
	if ($_POST['object'] == 'both' || $_POST['object'] == 'thumbnail'){
        list($suffix, $source) = glx_get_source($id, true);
    	$im = $gd['imagecreatefrom'][$suffix]($source);
    	$im = (function_exists('imagerotate')) ? imagerotate($im, $deg, 0) : glx_old_image_rotate($im, $deg);
    	$gd['image'][$suffix]($im, $source, 95);
    	imagedestroy($im);
	};
}
function glx_checkGd(){
    if (defined('GDEBUG2') && GDEBUG2 == true){
        if (!extension_loaded('gd')){
            echo "<p>Extension GD is not loaded by default";
            if (!dl('gd.so') && !dl('gd.dll')){
                " and cannot be loaded dynamic";
            } else {
                " but it can be loaded dynamic";
            };
            echo ".</p>";
        } else {
            echo "<p>Extension GD is loaded by default.";
        };
    };
}
function glxStylesheet(){
    $rs = safe_row("name", "txp_css", "name='glx_admin_image' limit 1");
    if (!$rs){
        $css = "bGFiZWwuaW5saW5lIHttYXJnaW46IDVweDt9CQ0KbGFiZWwuYmxvY2sge21hcmdpbjogNXB4IDVweCAwIDA7ZGlzcGxheTogYmxvY2s7fQ0KLnJlc2l6ZSB7ZmxvYXQ6IGxlZnQ7fQ0KLnJvdGF0ZSB7ZmxvYXQ6IHJpZ2h0O30NCmhyIHtib3JkZXItYm90dG9tOiAxcHggc29saWQgI0RERERERDtib3JkZXItdG9wOiBub25lO2JvcmRlci1yaWdodDogbm9uZTtib3JkZXItbGVmdDogbm9uZTtoZWlnaHQ6IDFweDtjbGVhcjogYm90aDt9DQojZ2x4ICNmczMsICNnbHggI2ZzNCB7aGVpZ2h0OmF1dG87fQ==";
        safe_insert("txp_css", "name='glx_admin_image', css='$css'");
    };
};
/**
 * function from mdp automatic resize and thumbnail for textpattern
 * by caged: <http://www.purephotoshop.com>
 */
function glx_get_gd_version() {
    if(!function_exists('imagecreatetruecolor')){
        $function_create = 'imagecreate';
        $function_copy = 'imagecopyresized';
    } else {
        $function_create = 'imagecreatetruecolor';
        $function_copy = 'imagecopyresampled';
    };
    /**
     * @see http://forum.textpattern.com/viewtopic.php?pid=59520#p59520
     */
	return array(
        'copy' => $function_copy,
        'create' => $function_create,
        'image' => array(
            'jpg' => 'imagejpeg',
            'png' => 'imagepng',
            'gif' => 'imagegif'
        ),
        'imagecreatefrom' => array(
            'jpg' => 'imagecreatefromjpeg',
            'png' => 'imagecreatefrompng',
            'gif' => 'imagecreatefromgif'
        )
    );
}
/** Rotate image php 4.3.0 or lower by Tobias Einarsson */
function glx_old_image_rotate($src, $angle){
    // check current GD version
    $gd = glx_get_gd_version();
    $width = imagesx($src);
    $height = imagesy($src);
    $dst = ($angle == 90 || $angle == 270) ? $gd['create']($height, $width) : $gd['create']($width, $height);
    for($y=0; $y<$height; $y++){
        for($x=0; $x<$width; $x++){
            switch ($angle){
                case 90:
                    imagecopy($dst, $src, $height-$y-1, $x, $x, $y, 1, 1);
                    break;
                case 180:
                    imagecopy($dst, $src, $x, $y, $width-$x-1, $height-$y-1, 1, 1);
                    break;
                case 270:
                    imagecopy($dst, $src, $y, $width-$x-1, $x, $y, 1, 1);
                    break;
                default:
                    imagecopy($dst, $src, $x, $y, $x, $y, 1, 1);
            };
        };
    };
    imagedestroy($src);
    return($dst);
}
/** Check if value is precent by ZiQ */
function ziqIsPercent($x) {
    if (is_numeric($x)){
        $tmp = intval($x);
        if ($tmp >= 10 && $tmp <= 100){
            return true;
        };
    };
    return false;
}
function glx_image_opts($event, $step) {
    echo<<<EOF
<script type="text/javascript">
<!--
window.onload = function() {
	var inputDoResizeLarge = document.createElement('input');
	inputDoResizeLarge.setAttribute('name', 'doResizeLarge');
	inputDoResizeLarge.setAttribute('id',   'doResizeLarge');
	inputDoResizeLarge.setAttribute('type', 'checkbox');
	inputDoResizeLarge.setAttribute('value', '1');
	inputDoResizeLarge.checked = false;
	var largeValue = getCookie('glx_image_large') ? ', stored value '+getCookie('glx_image_large')+'px' : ', stored value 500px';
	var labelDoResizeLarge = createLabel('doResizeLarge', 'Resize large image'+largeValue, 'inline');
	var pDoResizeLarge = document.createElement('p');
	pDoResizeLarge.appendChild(inputDoResizeLarge);
	pDoResizeLarge.appendChild(labelDoResizeLarge);
	var formUpload = document.getElementsByTagName('form').item(2);
	formUpload.appendChild(pDoResizeLarge);
}
function createLabel(forElement, text, elementClass) {
	var labelElement = document.createElement('label');
	labelElement.setAttribute('for', forElement);
	labelElement.className = elementClass;
	var labelTextNode = document.createTextNode(text);
	labelElement.appendChild(labelTextNode);
	return labelElement;
}
function getCookie(name) {
	var dc = document.cookie;
	var prefix = name + "=";
	var begin = dc.indexOf("; " + prefix);
	if (begin == -1) {
		begin = dc.indexOf(prefix);
		if (begin != 0) return null;
	} else {
    	begin += 2;
    }
  	var end = document.cookie.indexOf(";", begin);
	if (end == -1) {
		end = dc.length;
	}
  	return unescape(dc.substring(begin + prefix.length, end));
}
-->
</script>
EOF;
}
function glx_image_edit_opts($event, $step) {
	$id = gps('id');
	global $img_dir;
	$rs = safe_row("*", "txp_image", "id='$id'");
	if ($rs){
		extract($rs);
	} else {
	    return;
	};
    glxStylesheet();
    echo<<<EOF
<script language="JavaScript" type="text/javascript">
<!--
window.onload = function() {
EOF;
    if (HIDETXP == 1){
        echo "
      document.getElementsByTagName('tr')[6].style.display = 'none';
      document.getElementsByTagName('tr')[7].style.display = 'none';";
    };
    echo "
        loadCSS('css.php?n=glx_admin_image');
    // formcontainer
        var formGLX = document.createElement('form');
        formGLX.setAttribute('action', '');
        formGLX.setAttribute('id',     'glx');
        formGLX.setAttribute('method', 'post');
    //////////////////////////////////////////
    // fieldset: where to apply the changes //
    //////////////////////////////////////////
        var fs1 = document.createElement('fieldset');
        var l1  = document.createElement('legend');
        l1.innerHTML = 'Apply to';
        fs1.appendChild(l1);
	    fs1.setAttribute('id', 'fs1');
    // radio resize original
        var e11 = document.createElement('p');
        e11.appendChild(createRadio('object', 'r11', 'original', true));
        e11.appendChild(createLabel('r11', 'Original', 'inline'));
        fs1.appendChild(e11);
    // radio resize both
        var e12 = document.createElement('p');
        e12.appendChild(createRadio('object', 'r12', 'both', false));
        e12.appendChild(createLabel('r12', 'Both', 'inline'));
        fs1.appendChild(e12);
    // radio resize thumbnail
        var e13 = document.createElement('p');
        e13.appendChild(createRadio('object', 'r13', 'thumbnail', false));
        e13.appendChild(createLabel('r13', 'Thumbnail', 'inline'));
        fs1.appendChild(e13);
    // checkbox square thumbnail
        var e14 = document.createElement('p');
        e14.appendChild(createCheckbox('square', 's', '1', false));
        e14.appendChild(createLabel('s', 'Square thumbnail', 'inline'));
        fs1.appendChild(e14);
    // add fieldset to form
        formGLX.appendChild(fs1);
    ////////////////////////
    // fieldset: settings //
    ////////////////////////
        var fs2 = document.createElement('fieldset');
        var l2  = document.createElement('legend');
        l2.innerHTML = 'Settings';
        fs2.appendChild(l2);
	    fs2.setAttribute('id', 'fs2');
    // fs2 is parted in two divs for layout
        div1 = document.createElement('div');
        div2 = document.createElement('div');
    // input largeSize
        var e21 = document.createElement('p');
        var largeValue = (getCookie('glx_image_large')) ? getCookie('glx_image_large') : 500;
        e21.appendChild(createLabel('largeSize', 'Largesize (px)', 'block'));
        e21.appendChild(createInput('largeSize', 'largeSize', largeValue, false));
        div1.appendChild(e21);
    // input thumbSize
        var e22 = document.createElement('p');
        var thumbValue = (getCookie('glx_image_thumb')) ? getCookie('glx_image_thumb') : 100;
        e22.appendChild(createLabel('thumbSize', 'Thumbsize (px)', 'block'));
        e22.appendChild(createInput('thumbSize', 'thumbSize', thumbValue));
        div1.appendChild(e22);
    // radio button thumbsize-sideheight
        var e23 = document.createElement('p');
        e23.appendChild(createRadio('side', 'r21', 'height', false));
        e23.appendChild(createLabel('r21', 'height', 'inline'));
        div2.appendChild(e23);
    // radio button thumbsize-sidewidth
        var e24 = document.createElement('p');
        e24.appendChild(createRadio('side', 'r22', 'width', false));
        e24.appendChild(createLabel('r22', 'width', 'inline'));
        div2.appendChild(e24);
    // radio button thumbsize-sidelongest
        var e25 = document.createElement('p');
        e25.appendChild(createRadio('side', 'r23', 'longest', true));
        e25.appendChild(createLabel('r23', 'longest side', 'inline'));
        div2.appendChild(e25);
    // add fieldset to form
        fs2.appendChild(div1);
        fs2.appendChild(div2);
        formGLX.appendChild(fs2);
    //////////////////////
    // fieldset: rotate //
    //////////////////////
        var fs3 = document.createElement('fieldset');
        var l3  = document.createElement('legend');
        l3.innerHTML = 'Rotation';
        fs3.appendChild(l3);
	    fs3.setAttribute('id', 'fs3');
    // radio button rotate 90 CW
        var e32 = document.createElement('p');
        e32.appendChild(createRadio('rotateValue', 'r32', '270', true));
        e32.appendChild(createLabel('r32', '90° CW', 'inline'));
        fs3.appendChild(e32);
    // radio button rotate 180
        var e31 = document.createElement('p');
        e31.appendChild(createRadio('rotateValue', 'r31', '180', false));
        e31.appendChild(createLabel('r31', '180°', 'inline'));
        fs3.appendChild(e31);
    // radio button rotate 90 CCW
        var e33 = document.createElement('p');
        e33.appendChild(createRadio('rotateVal', 'r33', '90', false));
        e33.appendChild(createLabel('r33', '90° CCW', 'inline'));
        fs3.appendChild(e33);
    // add fieldset to form
        formGLX.appendChild(fs3);
    ////////////////////////////////////////////////////
    // final fieldset, thumbnail, hiddens and submits //
    ////////////////////////////////////////////////////
        var fs4 = document.createElement('fieldset');
        var l4  = document.createElement('legend');
        l4.innerHTML = 'Execute';
        fs4.appendChild(l4);
	    fs4.setAttribute('id', 'fs4');
    // hidden fields
        fs4.appendChild(createHidden('action', 'glx'));
        fs4.appendChild(createHidden('step', 'image_edit'));
        fs4.appendChild(createHidden('id', document.getElementsByName('id').item(0).value));
        fs4.appendChild(createHidden('event', 'image'));
        fs4.appendChild(createHidden('MAX_FILE_SIZE', document.getElementsByName('MAX_FILE_SIZE').item(0).value));
    //add submit
        fs4.appendChild(createSubmit('resize', 'Resize'));
        fs4.appendChild(createSubmit('rotate', 'Rotate'));
        fs4.appendChild(createSubmit('both',   'First resize and then rotate'));
    // output of the thumbnail
        var div3 = document.createElement('div');
        var e41 = document.createElement('img');
        e41.setAttribute('class', 'thumbnail');
        e41.setAttribute('src', '".hu.$img_dir."/".$id."t".$ext."');
        e41.setAttribute('alt', 'thumbnail of the picture');
        div3.appendChild(e41);
        fs4.appendChild(div3);
    // add fieldset to form
        formGLX.appendChild(fs4);
    // insert the form before the editform
        var divGLX = document.createElement('div');
        divGLX.className = 'glx';
        divGLX.appendChild(formGLX);
        var hrClear = document.createElement('hr');
        hrClear.className = 'clear';
        var oldForm = document.getElementsByTagName('form').item(1);
        oldForm.parentNode.insertBefore(divGLX, oldForm);
        oldForm.parentNode.insertBefore(hrClear, oldForm);
// TODO: IMAGEQUALITY
// input quality
//var inputQuaThumb = createInput('thumbQua', 'thumbQua', '90');
//var labelQuaThumb = createLabel('thumbQua', 'Quality Thumb (10-100)', 'block');
//var pQuaThumb = document.createElement('p');
//pQuaThumb.appendChild(labelQuaThumb);
//pQuaThumb.appendChild(inputQuaThumb);
// input quality
//var inputQuaLarge = createInput('largeQua', 'largeQua', '80');
//var labelQuaLarge = createLabel('largeQua', 'Quality Large Image (10-100)', 'block');
//var pQuaLarge = document.createElement('p');
//pQuaLarge.appendChild(labelQuaLarge);
//pQuaLarge.appendChild(inputQuaLarge);
}
function createHidden(name, value){
    var element = document.createElement('input');
    element.setAttribute('name', name);
    element.setAttribute('type', 'hidden');
    element.setAttribute('value', value);
    return element;
}
function createSubmit(name, value){
    var element = document.createElement('input');
    element.setAttribute('class', 'smallerbox');
    element.setAttribute('type', 'submit');
    element.setAttribute('value', value);
    element.setAttribute('name', name);
    return element;
}
function createRadio(name, id, value, checked){
	var element = document.createElement('input');
	element.setAttribute('name',  name);
	element.setAttribute('id',    id);
    element.setAttribute('type',  'radio');
	element.setAttribute('value', value);
    element.checked = (checked == true) ? true : false;
	element.className = 'edit';
	return element;
}
function createCheckbox(name, id, value, checked){
	var element = document.createElement('input');
	element.setAttribute('name',  name);
	element.setAttribute('id',    id);
    element.setAttribute('type',  'checkbox');
	element.setAttribute('value', value);
    element.checked = (checked == true) ? true : false;
	element.className = 'edit';
	return element;
}
function createInput(name, id, value){
	var element = document.createElement('input');
	element.setAttribute('name', name);
	element.setAttribute('id', id);
	element.setAttribute('type', 'text');
	element.setAttribute('value', value);
	element.className = 'edit';
	return element;
}
function createLabel(forElement, text, elementClass){
	var labelElement = document.createElement('label');
	labelElement.setAttribute('for', forElement);
	labelElement.className = elementClass;
	var labelTextNode = document.createTextNode(text);
	labelElement.appendChild(labelTextNode);
	return labelElement;
}
function loadCSS(fileName){
	var s = document.createElement('link');
	s.setAttribute('href', fileName);
	s.setAttribute('rel', 'stylesheet');
	s.setAttribute('type', 'text/css');
	document.getElementsByTagName('head').item(0).appendChild(s);
}
/**
 * http://www.webreference.com/js/column8/index.html
 */
function getCookie(name){
	var dc = document.cookie;
	var prefix = name + '=';
	var begin = dc.indexOf('; ' + prefix);
	if (begin == -1){begin = dc.indexOf(prefix);if (begin != 0) return null;}
    else begin += 2;
  	var end = document.cookie.indexOf(';', begin);
	if (end == -1) end = dc.length;
  	return unescape(dc.substring(begin + prefix.length, end));
}
-->
</script>
";
}
/**
 * Guess at file type by testing for existing files
 * By dln: <http://www.unempty.com/>
 * @see http://forum.textpattern.com/viewtopic.php?pid=59520#p59520
 */
function glx_get_source($image_id, $thumbnail = false) {
    $suffixes[] = (defined('JPG')) ? 'jpg'  : '';
    $suffixes[] = (defined('JPG')) ? 'JPG'  : '';
    $suffixes[] = (defined('JPG')) ? 'jpeg' : '';
    $suffixes[] = (defined('JPG')) ? 'JPEG' : '';
    $suffixes[] = (defined('PNG')) ? 'png'  : '';
    $suffixes[] = (defined('PNG')) ? 'PNG'  : '';
    $suffixes[] = (defined('GIF')) ? 'gif'  : '';
    $suffixes[] = (defined('GIF')) ? 'GIF'  : '';
    $suffixes = array_values(array_diff($suffixes, array('')));
    foreach ($suffixes as $suffix) {
        $source = ($thumbnail === false)
            ? IMPATH.$image_id.'.'.$suffix
            : IMPATH.$image_id.'t.'.$suffix;
        if (file_exists($source)) {
            return array($suffix, $source);
        };
    };
    return array(NULL, NULL);
}
";s:8:"code_md5";s:32:"57e97e44f5942e3ef631c5fb8c3172fb";s:4:"type";s:1:"1";}