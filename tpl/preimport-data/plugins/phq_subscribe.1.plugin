a:11:{s:4:"name";s:13:"phq_subscribe";s:6:"status";s:1:"1";s:6:"author";s:15:"Peter Hultqvist";s:10:"author_uri";s:24:"http://notes.endnode.se/";s:7:"version";s:5:"0.1.3";s:11:"description";s:29:"Comment subscription by email";s:4:"help";s:2312:"	<h1>Subscribe to comments via email</h1>

	<h2>Installation</h2>

	<p>For basic functionality all you need to do is enable the plugin in the admin-plugin area.</p>

	<h2>Basic usage</h2>

	<p>When you write a comment and specify your email address you will directly receive an email with a confirmation and an invitation to subscribe to the article comments.</p>

	<p>This subscriptions is done/confirmed by following the link in the email.</p>

	<p>After this the user will receive a new notification whenever a new comment is posted.</p>

	<p>All this is done automatically without intervention from the site owner once the plugin is installed and enabled.</p>

	<h2>Unsubscribe</h2>

	<p>Each mail you receive contain an unsubscribe link, follow it and you&#8217;re done.</p>

	<p>These mails can be customized(see below) but it is highly encouraged to at least keep this link.</p>

	<h2>Multiple comments</h2>

	<p>Only the first time you write a comment you will get the greeting and offer to subscribe.<br />
The email is recorded to that specific article so if you write a comment to another article you will once again receive a confirmation. This is wheter or not you choose to subscribe.<br />
If you choose not to subscribe there will be a record stating that. If you choose actively to unsubscribe the record will be removed.</p>

	<p>If you or the administrator chooses to unsubscribe any future comments will again be treated as the first one with the corresponding greeting email.</p>

	<h2>How to administrate</h2>

	<p>As an administrator, top three levels(comments), you can subscribe and unsubscribe emails using the &#8220;Subscriptions&#8221; tab under &#8220;Content&#8221; in the admin area.</p>

	<h2>How to customize</h2>

	<p>You can customize the emails that are sent on first comment and on subscription notifications by edit the &#8220;phq_subscribe_comment&#8221; and &#8220;phq_subscribe_new&#8221; misc Form under Presentation.</p>

	<p>After installation these templates are not to be found there until the first mail s sent for each type of message, therefore you must write one comment subscribe to it, and then write another one.<br />
You can also create the forms yourself using <txp:phq_unsubscribe_url /> and <txp:phq_subscribe_url /> to insert the respective urls.</p>

";s:4:"code";s:10141:"
register_callback('phq_subscribe_form','comment.form');
function phq_subscribe_form()
{
	global $pretext;
	return phq_subscribe_form_common($pretext['id']);
}

function phq_subscribe_form_common($article)
{
	// create the table if not available already
	phq_subscribe_createtable();

	//Subscribe/unsubscribe code
	$sub_code = gps('code');

	// Unsubscribe / delete record
	$unsub = gps('unsubscribe');
	if($unsub <> '')
	{
		if(safe_delete("phq_subscribe",
			"`article` = ".intval($article)." ".
			" AND `email` = '".mysql_real_escape_string($unsub)."' ".
			" AND `code` = '".mysql_real_escape_string($sub_code)."'"
		))
			phq_subscribe_mail($unsub, "Unsubscribe confirmation", "You have now been unsubscribed from ".permlinkurl_id($article));
	}

	// Subscribe/verify email
	$sub_email = gps('subscribe');
	if($sub_email <> '' && $sub_code <> '')
	{
		if(safe_update("phq_subscribe", '`subscribed` = true ',
			"`article` = '".intval($article)."' ".
			" AND `email` = '".mysql_real_escape_string($sub_email)."' ".
			" AND `code` = '".mysql_real_escape_string($sub_code)."'"
		))
			phq_subscribe_mail($sub_email, "Subscribe confirmation", "You have now been subscribed to ".permlinkurl_id($article));
	}

	return;
}

register_callback('phq_subscribe_save','comment.save');
function phq_subscribe_save()
{
	global $sitename;

	$comment = getComment();
	$article = safe_row("AuthorID, Title", "textpattern", "ID = ".intval($comment['parentid']));

	//Send notification to each subscriber
	$subscribers = array_unique(safe_rows('email, code', 'phq_subscribe', '`article` = '.intval($comment['parentid']).' AND `subscribed` = true'));
	if(is_array($subscribers))
	{
		$subject = '['.$sitename.'] New comment on article '.$article['Title'];
		$mailform = phq_subscribe_getmailform('comment');

		foreach($subscribers as $subscriber)
		{
			$body = parse(phq_subscriber_parse($mailform, $comment['parentid'], $subscriber['email'], $subscriber['code']));
			//Don't use phq_subscribe_mail here since that would reveal the IP address of other comment posters
			mail($subscriber['email'], $subject, $body, "From: ".$prefs['smtp_from']);
		};
	};

	//Send subscribe invite to comment author
	if(emailcheck($comment['email']) == true)
	{
		$code = mt_rand();
		$ret = safe_insert('phq_subscribe', '
			`article` = '.intval($comment['parentid']).',
			`email` = \''.mysql_real_escape_string($comment['email']).'\',
			`subscribed` = false,
			`code` = \''.mysql_real_escape_string($code).'\''
		);

		if($ret)
		{
			$article = safe_row("AuthorID, Title", "textpattern", "ID = ".intval($comment['parentid']));
			$author = safe_row("RealName, email", "txp_users", "name = '".mysql_real_escape_string($article['$AuthorID'])."'");
			$subject = '['.$sitename.'] Subscribe to article '.$article['Title'];
			$mailform = phq_subscribe_getmailform('new');
			$body = parse(phq_subscriber_parse($mailform, $comment['parentid'], $comment['email'], $code));
			phq_subscribe_mail($comment['email'], $subject, $body);
		}
	};


}

function phq_subscribe_getmailform($name)
{
	switch($name)
	{
	case 'comment':
		$form = "Hi there,\n\n".
			"There is a new comment on <txp:sitename/> for the  \"<txp:title />\".\n".
			"You can read it on <txp:permlink />.\n\n".
			"Unsubscribe by following this url: <txp:phq_unsubscribe_url />";
		break;
	case 'new':
		$form = "Follow this link to subscribe to the article \"<txp:title />\"\n".
				"<txp:phq_subscribe_url />\n\n".
				"You can read the article on <txp:permlink />.";
		break;
	default:
		return '';
	}

	$form_row = safe_row("Form", "txp_form", "name='phq_subscribe_$name' limit 1");
	if(!$form_row)
		safe_insert("txp_form", "name='phq_subscribe_$name', type='misc', Form='".mysql_real_escape_string($form)."'");

	if($form_row)
		return $form_row['Form'];
	else
		return $form;
}

function phq_subscribe_mail($email, $subject, $body)
{
	global $prefs;
	return mail($email, $subject, $body,
		"From: ".$prefs['smtp_from']."\n".
		'X-Remote-IP: '.$_SERVER['REMOTE_ADDR']
	);
}

function phq_subscribe_createtable(){

	$sql = 'SELECT * FROM `'.safe_pfx('phq_subscribe').'` LIMIT 1';
	if(safe_query($sql) == false){

		safe_query('RENAME TABLE `'.safe_pfx('phq_subscribe').'` TO `'.safe_pfx('phq_subscribe').'` ;');
		safe_query('CREATE TABLE IF NOT EXISTS `'.safe_pfx('phq_subscribe').'` (
					`article` int(11) unsigned NOT NULL,
					`email` varchar(127) NOT NULL,
					`subscribed` tinyint(1) NOT NULL,
					`code` varchar(127) NOT NULL,
					UNIQUE KEY `article` (`article`,`email`)
					);'
		);

	};
	return;
}

// Replace some tags with un/subscribe links
// This cannot be done using the textpattern parser because of the
// extra parameters that varies for each recipient.
function phq_subscriber_parse($content, $article, $email, $code)
{
	$url = permlinkurl_id($article);
	$url .= (strstr($url, '?')) ? "&" : "?";

	$sub_url		= $url."subscribe=".urlencode($email).'&code='.urlencode($code);
	$unsub_url	= $url."unsubscribe=".urlencode($email).'&code='.urlencode($code);

	$content = ereg_replace("<txp:phq_subscribe_url */>", $sub_url, $content);
	$content = ereg_replace("<txp:phq_unsubscribe_url */>", $unsub_url, $content);

	return $content;
}

if(!function_exists('emailcheck')){
	function emailcheck($eaddr=""){
		/**
		 * @var string Regexp f?r matching auf valide Emailsyntax
		 */
		$pattern = "/^([a-zA-Z0-9])+([\.a-zA-Z0-9_-])*@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-]+)+/";
		if (empty($eaddr)) {
			return false;
		} elseif (!preg_match($pattern, $eaddr)) {
			return false;
		} else {
			$laddr = "";
			$laddr = $eaddr;
			$laddr = preg_replace('/^.*</','', $laddr);
			$laddr = preg_replace('/>.*$/','',$laddr);
			if (preg_match('/^\@.*:/',$laddr)){
				list($domain,$addr_spec) = preg_split('/:/',$laddr);
				$domain = preg_replace('/^\@/','',$domain);
				if (!is_domain($domain)) {return false;}
				$laddr = $addr_spec;
			};
			return(is_addr_spec($laddr));
		};
	}
	/**#@+
	 * @access private
	 * @since 1.0.1 (26.03.2004)
	 * @version 1.0.1
	 */
	function is_addr_spec ($eaddr = ""){
		list($local_part,$domain) = preg_split('/\@/',$eaddr);
		if (!is_local_part($local_part) || !is_domain($domain)){
			return false;
		};
		return true;
	}
	function is_local_part ($local_part = ""){
		if (empty($local_part)) {
			return false;
		};
		$bit_array = preg_split('/\./',$local_part);
		while (list(,$bit) = each($bit_array)){
			if (!is_word($bit)) {
				return false;
			};
		};
		return true;
	}
	function is_word($word = ""){
		if (preg_match('/^".*"$/i',$word)){
			return(is_quoted_string($word));
		};
		return(is_atom($word));
	}
	function is_quoted_string($word = ""){
		$word = preg_replace('/^"/','',$word);
		$word = preg_replace('/"$/','',$word);
		$word = preg_replace('/\\+/','',$word);
		if (preg_match('/\"\\\r/',$word)){
			return false;
		};
		return true;
	}
	function is_atom($atom = ""){
		if ((preg_match('/[\(\)\<\>\@\,\;\:\\\"\.\[\]]/',$atom)) || (preg_match('/\040/',$atom)) || (preg_match('/[\x00-\x1F]/',$atom))) {
			return false;
		};
		return true;
	}
	function is_domain($domain = ""){
		if (empty($domain)) {
			return false;
		};
		if (!preg_match('/\./',$domain)) {
			return false;
		};
		$dbit_array = preg_split('/./',$domain);
		while (list(,$dbit) = each($dbit_array)){
			if (!is_sub_domain($dbit)) {
				return false;
			};
		};
		return true;
	}
	function is_sub_domain($subd = ""){
		if (preg_match('/^\[.*\]$/',$subd)){
			return(is_domain_literal($subd));
		};
		return(is_atom($subd));
	}
	function is_domain_literal($dom = ""){
		$dom = preg_replace('/\\+/','',$dom);
		if (preg_match('/[\[\]\\\r]/',$dom)){
			return false;
		};
		return true;
	}
	/**#@-*/

}

//Subscribe tab under Content in the admin area
if (@txpinterface == 'admin')
{
	global $phq_subscribe_adminevent;
	$phq_subscribe_adminevent = 'subscribe_admin';
	$mytab = 'Subscriptions';

	// Set the privilege levels for our new event
	add_privs($phq_subscribe_adminevent, '1,2,3');

	// Add a new tab under 'extensions' associated with our event
	register_tab("content", $phq_subscribe_adminevent, $mytab);

	// 'zem_admin_test' will be called to handle the new event
	register_callback("phq_subscribe_admin", $phq_subscribe_adminevent);

	function phq_subscribe_admin_sub_url($article, $email, $code)
	{
		global $phq_subscribe_adminevent;
		return
			'?event='.$phq_subscribe_adminevent.
			'&article='.urlencode($article).
			'&subscribe='.urlencode($email).
			'&code='.urlencode($code);
	}

	function phq_subscribe_admin_unsub_url($article, $email, $code)
	{
		global $phq_subscribe_adminevent;
		return
			'?event='.$phq_subscribe_adminevent.
			'&article='.urlencode($article).
			'&unsubscribe='.urlencode($email).
			'&code='.urlencode($code);
	}

	function phq_subscribe_admin($event, $step)
	{
		// We need the permlinkurl_id() function
		@include_once('publish/taghandlers.php');

		//For some reason this is needed on the top page of the admin tab.
		pagetop("Comment Subscriptions", "");

		phq_subscribe_form_common(gps('article'));

		$subscribers = safe_rows('article, email, code', 'phq_subscribe', '`subscribed` = true');
		echo '<h1>Subscribed</h1><table><tr><th>Article</th><th>Email</th><th>Unsubscribe/Remove</th></tr>';
		foreach($subscribers as $sub)
			echo '<tr>
				<td>'.htmlentities($sub['article']).'</td>
				<td>'.htmlentities($sub['email']).'</td>
				<td><a href="'.phq_subscribe_admin_unsub_url($sub['article'], $sub['email'], $sub['code']).'">Unsubscribe</a></td>
				</tr>';
		echo '</table>';

		$subscribers = safe_rows('article, email, code', 'phq_subscribe', '`subscribed` = false');
		echo '<h1>Not confirmed subscriptions</h1><table><tr><th>Article</th><th>Email</th><th>Subscribe</th><th>Remove</th></tr>';
		foreach($subscribers as $sub)
			echo '<tr>
				<td>'.htmlentities($sub['article']).'</td>
				<td>'.htmlentities($sub['email']).'</td>
				<td><a href="'.phq_subscribe_admin_sub_url($sub['article'], $sub['email'], $sub['code']).'">Subscribe</a></td>
				<td><a href="'.phq_subscribe_admin_unsub_url($sub['article'], $sub['email'], $sub['code']).'">Unsubscribe</a></td>
				</tr>';
		echo '</table>';
	}
}
";s:12:"code_restore";s:10141:"
register_callback('phq_subscribe_form','comment.form');
function phq_subscribe_form()
{
	global $pretext;
	return phq_subscribe_form_common($pretext['id']);
}

function phq_subscribe_form_common($article)
{
	// create the table if not available already
	phq_subscribe_createtable();

	//Subscribe/unsubscribe code
	$sub_code = gps('code');

	// Unsubscribe / delete record
	$unsub = gps('unsubscribe');
	if($unsub <> '')
	{
		if(safe_delete("phq_subscribe",
			"`article` = ".intval($article)." ".
			" AND `email` = '".mysql_real_escape_string($unsub)."' ".
			" AND `code` = '".mysql_real_escape_string($sub_code)."'"
		))
			phq_subscribe_mail($unsub, "Unsubscribe confirmation", "You have now been unsubscribed from ".permlinkurl_id($article));
	}

	// Subscribe/verify email
	$sub_email = gps('subscribe');
	if($sub_email <> '' && $sub_code <> '')
	{
		if(safe_update("phq_subscribe", '`subscribed` = true ',
			"`article` = '".intval($article)."' ".
			" AND `email` = '".mysql_real_escape_string($sub_email)."' ".
			" AND `code` = '".mysql_real_escape_string($sub_code)."'"
		))
			phq_subscribe_mail($sub_email, "Subscribe confirmation", "You have now been subscribed to ".permlinkurl_id($article));
	}

	return;
}

register_callback('phq_subscribe_save','comment.save');
function phq_subscribe_save()
{
	global $sitename;

	$comment = getComment();
	$article = safe_row("AuthorID, Title", "textpattern", "ID = ".intval($comment['parentid']));

	//Send notification to each subscriber
	$subscribers = array_unique(safe_rows('email, code', 'phq_subscribe', '`article` = '.intval($comment['parentid']).' AND `subscribed` = true'));
	if(is_array($subscribers))
	{
		$subject = '['.$sitename.'] New comment on article '.$article['Title'];
		$mailform = phq_subscribe_getmailform('comment');

		foreach($subscribers as $subscriber)
		{
			$body = parse(phq_subscriber_parse($mailform, $comment['parentid'], $subscriber['email'], $subscriber['code']));
			//Don't use phq_subscribe_mail here since that would reveal the IP address of other comment posters
			mail($subscriber['email'], $subject, $body, "From: ".$prefs['smtp_from']);
		};
	};

	//Send subscribe invite to comment author
	if(emailcheck($comment['email']) == true)
	{
		$code = mt_rand();
		$ret = safe_insert('phq_subscribe', '
			`article` = '.intval($comment['parentid']).',
			`email` = \''.mysql_real_escape_string($comment['email']).'\',
			`subscribed` = false,
			`code` = \''.mysql_real_escape_string($code).'\''
		);

		if($ret)
		{
			$article = safe_row("AuthorID, Title", "textpattern", "ID = ".intval($comment['parentid']));
			$author = safe_row("RealName, email", "txp_users", "name = '".mysql_real_escape_string($article['$AuthorID'])."'");
			$subject = '['.$sitename.'] Subscribe to article '.$article['Title'];
			$mailform = phq_subscribe_getmailform('new');
			$body = parse(phq_subscriber_parse($mailform, $comment['parentid'], $comment['email'], $code));
			phq_subscribe_mail($comment['email'], $subject, $body);
		}
	};


}

function phq_subscribe_getmailform($name)
{
	switch($name)
	{
	case 'comment':
		$form = "Hi there,\n\n".
			"There is a new comment on <txp:sitename/> for the  \"<txp:title />\".\n".
			"You can read it on <txp:permlink />.\n\n".
			"Unsubscribe by following this url: <txp:phq_unsubscribe_url />";
		break;
	case 'new':
		$form = "Follow this link to subscribe to the article \"<txp:title />\"\n".
				"<txp:phq_subscribe_url />\n\n".
				"You can read the article on <txp:permlink />.";
		break;
	default:
		return '';
	}

	$form_row = safe_row("Form", "txp_form", "name='phq_subscribe_$name' limit 1");
	if(!$form_row)
		safe_insert("txp_form", "name='phq_subscribe_$name', type='misc', Form='".mysql_real_escape_string($form)."'");

	if($form_row)
		return $form_row['Form'];
	else
		return $form;
}

function phq_subscribe_mail($email, $subject, $body)
{
	global $prefs;
	return mail($email, $subject, $body,
		"From: ".$prefs['smtp_from']."\n".
		'X-Remote-IP: '.$_SERVER['REMOTE_ADDR']
	);
}

function phq_subscribe_createtable(){

	$sql = 'SELECT * FROM `'.safe_pfx('phq_subscribe').'` LIMIT 1';
	if(safe_query($sql) == false){

		safe_query('RENAME TABLE `'.safe_pfx('phq_subscribe').'` TO `'.safe_pfx('phq_subscribe').'` ;');
		safe_query('CREATE TABLE IF NOT EXISTS `'.safe_pfx('phq_subscribe').'` (
					`article` int(11) unsigned NOT NULL,
					`email` varchar(127) NOT NULL,
					`subscribed` tinyint(1) NOT NULL,
					`code` varchar(127) NOT NULL,
					UNIQUE KEY `article` (`article`,`email`)
					);'
		);

	};
	return;
}

// Replace some tags with un/subscribe links
// This cannot be done using the textpattern parser because of the
// extra parameters that varies for each recipient.
function phq_subscriber_parse($content, $article, $email, $code)
{
	$url = permlinkurl_id($article);
	$url .= (strstr($url, '?')) ? "&" : "?";

	$sub_url		= $url."subscribe=".urlencode($email).'&code='.urlencode($code);
	$unsub_url	= $url."unsubscribe=".urlencode($email).'&code='.urlencode($code);

	$content = ereg_replace("<txp:phq_subscribe_url */>", $sub_url, $content);
	$content = ereg_replace("<txp:phq_unsubscribe_url */>", $unsub_url, $content);

	return $content;
}

if(!function_exists('emailcheck')){
	function emailcheck($eaddr=""){
		/**
		 * @var string Regexp f?r matching auf valide Emailsyntax
		 */
		$pattern = "/^([a-zA-Z0-9])+([\.a-zA-Z0-9_-])*@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-]+)+/";
		if (empty($eaddr)) {
			return false;
		} elseif (!preg_match($pattern, $eaddr)) {
			return false;
		} else {
			$laddr = "";
			$laddr = $eaddr;
			$laddr = preg_replace('/^.*</','', $laddr);
			$laddr = preg_replace('/>.*$/','',$laddr);
			if (preg_match('/^\@.*:/',$laddr)){
				list($domain,$addr_spec) = preg_split('/:/',$laddr);
				$domain = preg_replace('/^\@/','',$domain);
				if (!is_domain($domain)) {return false;}
				$laddr = $addr_spec;
			};
			return(is_addr_spec($laddr));
		};
	}
	/**#@+
	 * @access private
	 * @since 1.0.1 (26.03.2004)
	 * @version 1.0.1
	 */
	function is_addr_spec ($eaddr = ""){
		list($local_part,$domain) = preg_split('/\@/',$eaddr);
		if (!is_local_part($local_part) || !is_domain($domain)){
			return false;
		};
		return true;
	}
	function is_local_part ($local_part = ""){
		if (empty($local_part)) {
			return false;
		};
		$bit_array = preg_split('/\./',$local_part);
		while (list(,$bit) = each($bit_array)){
			if (!is_word($bit)) {
				return false;
			};
		};
		return true;
	}
	function is_word($word = ""){
		if (preg_match('/^".*"$/i',$word)){
			return(is_quoted_string($word));
		};
		return(is_atom($word));
	}
	function is_quoted_string($word = ""){
		$word = preg_replace('/^"/','',$word);
		$word = preg_replace('/"$/','',$word);
		$word = preg_replace('/\\+/','',$word);
		if (preg_match('/\"\\\r/',$word)){
			return false;
		};
		return true;
	}
	function is_atom($atom = ""){
		if ((preg_match('/[\(\)\<\>\@\,\;\:\\\"\.\[\]]/',$atom)) || (preg_match('/\040/',$atom)) || (preg_match('/[\x00-\x1F]/',$atom))) {
			return false;
		};
		return true;
	}
	function is_domain($domain = ""){
		if (empty($domain)) {
			return false;
		};
		if (!preg_match('/\./',$domain)) {
			return false;
		};
		$dbit_array = preg_split('/./',$domain);
		while (list(,$dbit) = each($dbit_array)){
			if (!is_sub_domain($dbit)) {
				return false;
			};
		};
		return true;
	}
	function is_sub_domain($subd = ""){
		if (preg_match('/^\[.*\]$/',$subd)){
			return(is_domain_literal($subd));
		};
		return(is_atom($subd));
	}
	function is_domain_literal($dom = ""){
		$dom = preg_replace('/\\+/','',$dom);
		if (preg_match('/[\[\]\\\r]/',$dom)){
			return false;
		};
		return true;
	}
	/**#@-*/

}

//Subscribe tab under Content in the admin area
if (@txpinterface == 'admin')
{
	global $phq_subscribe_adminevent;
	$phq_subscribe_adminevent = 'subscribe_admin';
	$mytab = 'Subscriptions';

	// Set the privilege levels for our new event
	add_privs($phq_subscribe_adminevent, '1,2,3');

	// Add a new tab under 'extensions' associated with our event
	register_tab("content", $phq_subscribe_adminevent, $mytab);

	// 'zem_admin_test' will be called to handle the new event
	register_callback("phq_subscribe_admin", $phq_subscribe_adminevent);

	function phq_subscribe_admin_sub_url($article, $email, $code)
	{
		global $phq_subscribe_adminevent;
		return
			'?event='.$phq_subscribe_adminevent.
			'&article='.urlencode($article).
			'&subscribe='.urlencode($email).
			'&code='.urlencode($code);
	}

	function phq_subscribe_admin_unsub_url($article, $email, $code)
	{
		global $phq_subscribe_adminevent;
		return
			'?event='.$phq_subscribe_adminevent.
			'&article='.urlencode($article).
			'&unsubscribe='.urlencode($email).
			'&code='.urlencode($code);
	}

	function phq_subscribe_admin($event, $step)
	{
		// We need the permlinkurl_id() function
		@include_once('publish/taghandlers.php');

		//For some reason this is needed on the top page of the admin tab.
		pagetop("Comment Subscriptions", "");

		phq_subscribe_form_common(gps('article'));

		$subscribers = safe_rows('article, email, code', 'phq_subscribe', '`subscribed` = true');
		echo '<h1>Subscribed</h1><table><tr><th>Article</th><th>Email</th><th>Unsubscribe/Remove</th></tr>';
		foreach($subscribers as $sub)
			echo '<tr>
				<td>'.htmlentities($sub['article']).'</td>
				<td>'.htmlentities($sub['email']).'</td>
				<td><a href="'.phq_subscribe_admin_unsub_url($sub['article'], $sub['email'], $sub['code']).'">Unsubscribe</a></td>
				</tr>';
		echo '</table>';

		$subscribers = safe_rows('article, email, code', 'phq_subscribe', '`subscribed` = false');
		echo '<h1>Not confirmed subscriptions</h1><table><tr><th>Article</th><th>Email</th><th>Subscribe</th><th>Remove</th></tr>';
		foreach($subscribers as $sub)
			echo '<tr>
				<td>'.htmlentities($sub['article']).'</td>
				<td>'.htmlentities($sub['email']).'</td>
				<td><a href="'.phq_subscribe_admin_sub_url($sub['article'], $sub['email'], $sub['code']).'">Subscribe</a></td>
				<td><a href="'.phq_subscribe_admin_unsub_url($sub['article'], $sub['email'], $sub['code']).'">Unsubscribe</a></td>
				</tr>';
		echo '</table>';
	}
}
";s:8:"code_md5";s:32:"c415e21eb5c14cea1dfda767f1f1e1a5";s:4:"type";s:1:"1";}